-- Load Sirius Rayfield UI Library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Create the UI window
local Window = Rayfield:CreateWindow({
    Name = "Slap Battles Script by d3cryptt! (best sb script ever!)",
    LoadingTitle = "Loading Slap Battles Script...",
    LoadingSubtitle = "Created by d3cryptt",
    ConfigurationSaving = {
        Enabled = false,
        FolderName = nil,
        FileName = "SlapBattlesUI"
    }
})

-- Slap Aura Tab
local SlapAuraTab = Window:CreateTab("Slap Aura", 4483362458)
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer
local slapCooldown = 0.6
local lastSlapTime = 0
local slapEnabled = false
local selectedRemote = "PlagueHit"

-- Function to slap the closest player within the default slap distance
local function slapClosestPlayer()
    if not slapEnabled then return end

    local closestPlayer = nil
    local closestDistance = 100  -- Default slap distance

    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local playerPosition = player.Character.HumanoidRootPart.Position

        for _, otherPlayer in pairs(Players:GetPlayers()) do
            if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local otherPlayerPosition = otherPlayer.Character.HumanoidRootPart.Position
                local distance = (playerPosition - otherPlayerPosition).Magnitude

                if distance <= closestDistance then
                    closestDistance = distance
                    closestPlayer = otherPlayer
                end
            end
        end

        if closestPlayer and tick() - lastSlapTime >= slapCooldown then
            lastSlapTime = tick()
            if closestPlayer.Character and closestPlayer.Character:FindFirstChild("Head") then
                local head = closestPlayer.Character.Head
                local args = {head}
                local remote = ReplicatedStorage:FindFirstChild(selectedRemote)
                if remote then
                    remote:FireServer(unpack(args))
                else
                    warn("Remote not found:", selectedRemote)
                end
            end
        end
    end
end

local gloveList = {
    {"Default", "b"},
    {"Dual", "GeneralHit"},
    {"Diamond", "DiamondHit"},
    {"ZZZZZZZ", "ZZZZZZZHit"},
    {"Extended", "b"},
    {"Brick", "BrickHit"},
    {"Snow", "SnowHit"},
    {"Pull", "PullHit"},
    {"Flash", "FlashHit"},
    {"Spring", "springhit"},
    {"Swapper", "HitSwapper"},
    {"Bull", "BullHit"},
    {"Dice", "DiceHit"},
    {"Ghost", "GhostHit"},
    {"Thanos", "ThanosHit"},
    {"Stun", "HtStun"},
    {"L.O.L.B.O.M.B", "GeneralHit"},
    {"Za Hando", "zhrmat"},
    {"Fort", "Fort"},
    {"Magnet", "MagnetHIT"},
    {"Pusher", "PusherHit"},
    {"Anchor", "hitAnchor"},
    {"Space", "HtSpace"},
    {"Boomerang", "BoomerangH"},
    {"Speedrun", "Speedrunhit"},
    {"Mail", "MailHit"},
    {"T H I C K", "GeneralHit"},
    {"Golden", "GoldenHit"},
    {"Squid", "GeneralHit"},
    {"MR", "MisterHit"},
    {"Hive", "GeneralHit"},
    {"Reaper", "GeneralHit"},
    {"Replica", "ReplicaHit"},
    {"Defense", "DefenseHit"},
    {"Killstreak", "KSHit"},
    {"Reverse", "ReverseHit"},
    {"Shukuchi", "ShukuchiHit"},
    {"Duelist", "DuelistHit"},
    {"Woah", "woahHit"},
    {"Ice", "IceHit"},
    {"Gummy", "GeneralHit"},
    {"Adios", "hitAdios"},
    {"Blocked", "BlockedHit"},
    {"Divert", "GeneralHit"},
    {"Engineer", "engiehit"},
    {"Rocky", "RockyHit"},
    {"Coil", "GeneralHit"},
    {"Conveyor", "ConvHit"},
    {"Balloony", "GeneralHit"},
    {"Phantom", "PhantomHit"},
    {"El Gato", "GeneralHit"},
    {"Wormhole", "GeneralHit"},
    {"Shackle", "GeneralHit"},
    {"Stop", "GeneralHit"},
    {"Track", "GeneralHit"},
    {"Prop", "GeneralHit"},
    {"Shield", "GeneralHit"},
    {"Booster", "GeneralHit"},
    {"Ping Pong", "GeneralHit"},
    {"Baller", "GeneralHit"},
    {"Home Run", "GeneralHit"},
    {"Whirlwind", "GeneralHit"},
    {"Slicer", "GeneralHit"},
    {"Excavator", "GeneralHit"},
    {"Nightmare", "nightmarehit"},
    {"Thor", "ThorHit"},
    {"Pocket", "GeneralHit"},
    {"Grapple", "GeneralHit"},
    {"Cloud", "CloudHit"},
    {"Gravity", "GeneralHit"},
    {"Parry", "GeneralHit"},
    {"Jebaited", "GeneralHit"},
    {"Meteor", "GeneralHit"},
    {"Oven", "GeneralHit"},
    {"Guardian Angel", "GeneralHit"},
    {"Sun", "GeneralHit"},
    {"Ferryman", "GeneralHit"},
    {"Blackhole", "GeneralHit"},
    {"Blink", "GeneralHit"},
    {"Tableflip", "GeneralHit"},
    {"Slapstick", "GeneralHit"},
    {"Beatdown", "GeneralHit"},
    {"Chicken", "GeneralHit"},
    {"Bonk", "GeneralHit"},
    {"Sbeve", "GeneralHit"},
    {"Golem", "GeneralHit"},
    {"Grab", "GeneralHit"},
    {"UFO", "GeneralHit"},
    {"Demolition", "GeneralHit"},
    {"Beachball", "GeneralHit"},
    {"Shotgun", "GeneralHit"},
    {"64", "GeneralHit"},
    {"Roguelike", "GeneralHit"},
    {"Barrel", "GeneralHit"},
    {"Lawnmower", "GeneralHit"},
    {"God's Hand", "not supported"},
    {"The Flex", "FlexHit"},
    {"Overkill", "Overkillhit"},
    {"CUSTOM", "CustomHit"},
    {"CULT", "CULTHit"},
    {"Plague", "PlagueHit"},
    {"Leash", "GeneralHit"},
    {"the schlob", "GeneralHit"},
    {"buddies", "buddiesHIT"},
    {"Tycoon", "GeneralHit"},
    {"Orbit", "Orbihit"},
    {"Avatar", "GeneralHit"},
    {"Frostbite", "GeneralHit"}
}

local gloveNames = {}
for _, glove in ipairs(gloveList) do
    table.insert(gloveNames, glove[1])
end

SlapAuraTab:CreateDropdown({
    Name = "Select Glove",
    Options = gloveNames,
    CurrentOption = "Plague",
    MultipleOptions = false,
    Flag = "GloveDropdown",
    Callback = function(selectedOption)
        for _, glove in ipairs(gloveList) do
            if glove[1] == selectedOption then
                selectedRemote = glove[2]
                print("Selected Remote:", selectedRemote)
                break
            end
        end
    end
})

SlapAuraTab:CreateToggle({
    Name = "Enable Slap Aura",
    CurrentValue = false,
    Flag = "SlapAuraToggle",
    Callback = function(state)
        slapEnabled = state
        print("Slap Aura enabled:", slapEnabled)
    end
})

SlapAuraTab:CreateButton({
    Name = "Tp to Arena (god mode)",
    Callback = function()
        local player = game.Players.LocalPlayer.Character
        local part = workspace.Arena["main island"].Grass
        player.HumanoidRootPart.CFrame = part.CFrame
    end
})

local RunService = game:GetService("RunService")
RunService.RenderStepped:Connect(function()
    if slapEnabled then
        slapClosestPlayer()
    end
end)

local SlappleFarmTab = Window:CreateTab("Slapple Farm", 4483362458)

SlappleFarmTab:CreateToggle({
    Name = "Enable Slapple Farm",
    CurrentValue = false,
    Flag = "SlappleFarmToggle",
    Callback = function(state)
        slappleFarmEnabled = state
    end
})

local function farmSlapples()
    local slappleContainer = workspace:FindFirstChild("Arena") and workspace.Arena:FindFirstChild("island5") and workspace.Arena.island5:FindFirstChild("Slapples")
    if slappleContainer then
        for _, slapple in ipairs(slappleContainer:GetChildren()) do
            if slapple:IsA("Model") and slapple:FindFirstChild("Glove") then
                local glove = slapple.Glove
                if glove:FindFirstChild("TouchInterest") then
                    firetouchinterest(player.Character.HumanoidRootPart, glove, 0)
                    firetouchinterest(player.Character.HumanoidRootPart, glove, 1)
                end
            end
        end
    end
end

local function onUpdate()
    if slapEnabled then
        slapClosestPlayer()
    end
    if slappleFarmEnabled then
        farmSlapples()
    end
end

RunService.RenderStepped:Connect(onUpdate)

SlappleFarmTab:CreateButton({
    Name = "Grab slapples and serverhop (put in autoexec)",
    Callback = function()
        local player = game.Players.LocalPlayer
        local teleportService = game:GetService("TeleportService")
        local httpService = game:GetService("HttpService")
        local placeId, jobId = game.PlaceId, game.JobId

        repeat wait() until player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        repeat wait() until workspace:FindFirstChild("Lobby") and workspace.Lobby:FindFirstChild("Teleport1") and workspace:FindFirstChild("Arena") and workspace.Arena:FindFirstChild("island5") and workspace.Arena.island5:FindFirstChild("Slapples")

        local function teleportToArena()
            local teleportTouch = workspace.Lobby.Teleport1:FindFirstChild("TouchInterest")
            if teleportTouch then
                firetouchinterest(player.Character.HumanoidRootPart, workspace.Lobby.Teleport1, 0)
                firetouchinterest(player.Character.HumanoidRootPart, workspace.Lobby.Teleport1, 1)
            end
        end

        local function farmSlapples()
            local slappleContainer = workspace.Arena.island5.Slapples
            local slapplesPresent = false

            for _, slapple in ipairs(slappleContainer:GetChildren()) do
                if slapple:IsA("Model") and slapple:FindFirstChild("Glove") then
                    local glove = slapple.Glove
                    if glove:FindFirstChild("TouchInterest") then
                        firetouchinterest(player.Character.HumanoidRootPart, glove, 0)
                        firetouchinterest(player.Character.HumanoidRootPart, glove, 1)
                        slapplesPresent = true
                    end
                end
            end
            return slapplesPresent
        end

        local function serverHop()
            local httpRequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
            if httpRequest then
                local servers = {}
                local req = httpRequest({
                    Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true", placeId)
                })
                local body = httpService:JSONDecode(req.Body)

                if body and body.data then
                    for _, server in ipairs(body.data) do
                        if type(server) == "table" and tonumber(server.playing) and tonumber(server.maxPlayers) and server.playing < server.maxPlayers and server.id ~= jobId then
                            table.insert(servers, server.id)
                        end
                    end
                end

                if #servers > 0 then
                    teleportService:TeleportToPlaceInstance(placeId, servers[math.random(1, #servers)], player)
                else
                    warn("Serverhop: Couldn't find a server.")
                end
            else
                warn("Incompatible Exploit: Your exploit does not support this serverhop script (missing request)")
            end
        end

        while true do
            teleportToArena()
            wait(1)

            local slapplesFound
            repeat
                slapplesFound = farmSlapples()
                wait(0.1)
            until not slapplesFound

            serverHop()
            wait(5)
        end
    end
})

local AntiFallTab = Window:CreateTab("Anti Fall", 4483362458)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

local teleportCFrame = CFrame.new(-6.73902416, -5.20054817, 1.95076489, -0.136649311, -0.00766478525, -0.990589857, -0.000125628911, 0.999970198, -0.00772003829, 0.99061954, -0.000930505106, -0.136646196)
local fallProtectionEnabled = false

local function checkFall()
    if fallProtectionEnabled and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local yPosition = player.Character.HumanoidRootPart.Position.Y
        if yPosition < -10 then
            player.Character:SetPrimaryPartCFrame(teleportCFrame)
        end
    end
end

AntiFallTab:CreateToggle({
    Name = "Teleport Anti Fall",
    CurrentValue = false,
    Flag = "TeleportAntiFallToggle",
    Callback = function(state)
        fallProtectionEnabled = state
    end
})

RunService.Heartbeat:Connect(checkFall)

local originalCFrame = CFrame.new(-4.08799744, -8.92285156, 1.83599997) * CFrame.Angles(0, 0, math.rad(0.06))
local platformSize = Vector3.new(3000, 1, 3000)
local platform
local isPlatformVisible = false

local function createPlatform()
    if not platform then
        platform = Instance.new("Part")
        platform.Size = platformSize
        platform.CFrame = originalCFrame
        platform.Anchored = true
        platform.CanCollide = true
        platform.Transparency = 0.8
        platform.Parent = workspace
    end
    platform.Parent = workspace
end

local function removePlatform()
    if platform then
        platform.Parent = nil
    end
end

local function togglePlatform()
    if isPlatformVisible then
        removePlatform()
    else
        createPlatform()
    end
    isPlatformVisible = not isPlatformVisible
end

AntiFallTab:CreateToggle({
    Name = "Invisible Floor Anti Fall",
    CurrentValue = false,
    Flag = "InvisibleFloorToggle",
    Callback = function(state)
        togglePlatform()
    end
})

AntiFallTab:CreateButton({
    Name = "Delete Void/Death Barriers (not lobby)",
    Callback = function()
        local partsToDelete = {
            workspace:FindFirstChild("DEATHBARRIER"),
            workspace:FindFirstChild("DEATHBARRIER2"),
            workspace:FindFirstChild("ArenaBarrier"),
            workspace:FindFirstChild("dedBarrier"),
            workspace:FindFirstChild("AntiDefaultArena")
        }
        
        for _, part in ipairs(partsToDelete) do
            if part then
                part:Destroy()
            end
        end

        local lobbyFrame = workspace:FindFirstChild("Lobby") and workspace.Lobby:FindFirstChild("LobbyFrame")
        if lobbyFrame then
            for _, descendant in ipairs(lobbyFrame:GetDescendants()) do
                if descendant:IsA("TouchTransmitter") then
                    descendant:Destroy()
                end
            end
        end
    end
})

local PlayerTab = Window:CreateTab("Player", 4483362458)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local hrp = nil
local toggle = false
local slappedPlayers = {}

player.CharacterAdded:Connect(function(character)
    hrp = character:WaitForChild("HumanoidRootPart")
end)

if player.Character then
    hrp = player.Character:FindFirstChild("HumanoidRootPart")
end

PlayerTab:CreateToggle({
    Name = "Autofarm Toggle",
    CurrentValue = false,
    Flag = "AutofarmToggle",
    Callback = function(state)
        toggle = state
    end
})

function findClosestTarget()
    local closestTarget = nil
    local closestDistance = math.huge

    for _, target in ipairs(game.Players:GetPlayers()) do
        if target ~= player and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
            local inArenaStat = workspace:FindFirstChild(target.Name) and workspace[target.Name]:FindFirstChild("isInArena")
            if inArenaStat and inArenaStat.Value == true and not slappedPlayers[target.Name] then
                local distance = (hrp.Position - target.Character.HumanoidRootPart.Position).magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    closestTarget = target
                end
            end
        end
    end
    return closestTarget
end

spawn(function()
    while true do
        if toggle and hrp then
            local target = findClosestTarget()
            if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
                local startTime = tick()

                while toggle and (tick() - startTime < 0.6) do
                    hrp.CFrame = CFrame.new(target.Character.HumanoidRootPart.Position - Vector3.new(0, 10, 0))
                    wait(0.05)
                end

                slappedPlayers[target.Name] = true
                spawn(function()
                    wait(1)
                    slappedPlayers[target.Name] = nil
                end)
            end
        else
            wait(0.1)
        end
    end
end)

local HumanModCons = {}

local function WalkSpeedChange(speed)
    humanoid.WalkSpeed = speed
end

local function JumpPowerChange(power)
    humanoid.JumpPower = power
end

PlayerTab:CreateSlider({
    Name = "Walk Speed",
    Range = {16, 150},
    Increment = 1,
    CurrentValue = 16,
    Flag = "WalkSpeedSlider",
    Callback = function(value)
        local speed = value
        if isnumber(speed) then
            WalkSpeedChange(speed)
            HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
                WalkSpeedChange(speed)
            end)
            HumanModCons.wsCA = (HumanModCons.wsCA and HumanModCons.wsCA:Disconnect() and false) or player.CharacterAdded:Connect(function(nChar)
                character, humanoid = nChar, nChar:WaitForChild("Humanoid")
                WalkSpeedChange(speed)
                HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
                    WalkSpeedChange(speed)
                end)
            end)
        end
    end
})

PlayerTab:CreateSlider({
    Name = "Jump Power",
    Range = {50, 150},
    Increment = 1,
    CurrentValue = 50,
    Flag = "JumpPowerSlider",
    Callback = function(value)
        local power = value
        if isnumber(power) then
            JumpPowerChange(power)
            HumanModCons.jpLoop = (HumanModCons.jpLoop and HumanModCons.jpLoop:Disconnect() and false) or humanoid:GetPropertyChangedSignal("JumpPower"):Connect(function()
                JumpPowerChange(power)
            end)
            HumanModCons.jpCA = (HumanModCons.jpCA and HumanModCons.jpCA:Disconnect() and false) or player.CharacterAdded:Connect(function(nChar)
                character, humanoid = nChar, nChar:WaitForChild("Humanoid")
                JumpPowerChange(power)
                HumanModCons.jpLoop = (HumanModCons.jpLoop and HumanModCons.jpLoop:Disconnect() and false) or humanoid:GetPropertyChangedSignal("JumpPower"):Connect(function()
                    JumpPowerChange(power)
                end)
            end)
        end
    end
})

Players.PlayerRemoving:Connect(function(removingPlayer)
    if removingPlayer == player then
        if HumanModCons.wsLoop then HumanModCons.wsLoop:Disconnect() end
        if HumanModCons.wsCA then HumanModCons.wsCA:Disconnect() end
        if HumanModCons.jpLoop then HumanModCons.jpLoop:Disconnect() end
        if HumanModCons.jpCA then HumanModCons.jpCA:Disconnect() end
    end
end)

function isnumber(value)
    return type(value) == "number"
end

local extrashitTab = Window:CreateTab("extra stuff", 4483362458)

extrashitTab:CreateToggle({
    Name = "Auto Click Tycoon BROKEN",
    CurrentValue = false,
    Flag = "AutoTycoonToggle",
    Callback = function(Value)
        AutoTycoon = Value
        for i, v in pairs(workspace:GetDescendants()) do
            if v.Name == "End" and v.ClassName == "Part" then
                v.Size = Vector3.new(28, 0.3, 4)
            end
        end
        while AutoTycoon do
            for i, v in pairs(workspace:GetDescendants()) do
                if v.Name == "Click" and v:FindFirstChild("ClickDetector") then
                    fireclickdetector(v.ClickDetector)
                end
            end
            task.wait()
        end
    end
})

extrashitTab:CreateButton({
    Name = "Remove reaper slap effect (use after they slap you)",
    Callback = function()
        for i = 1, 20 do
            game:GetService("ReplicatedStorage"):WaitForChild("HumanoidDied"):FireServer(x, false)
        end
        for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
            if v.Name == "DeathMark" then
                game.ReplicatedStorage.ReaperGone:FireServer(v)
                game:GetService("Lighting"):WaitForChild("DeathMarkColorCorrection"):Destroy()
            end
        end
    end
})

extrashitTab:CreateToggle({
    Name = "Rhythm Explosion Spam BROKEN",
    CurrentValue = false,
    Flag = "RhythmSpamToggle",
    Callback = function(state)
        RhythmSpam = state
        while RhythmSpam do
            game:GetService("ReplicatedStorage").rhythmevent:FireServer("AoeExplosion", 0)
            task.wait()
        end
    end
})

extrashitTab:CreateToggle({
    Name = "Null Ability BROKEN",
    CurrentValue = false,
    Flag = "NullAbilityToggle",
    Callback = function(state)
        NullSpam = state
        while NullSpam do
            game:GetService("ReplicatedStorage").NullAbility:FireServer()
            task.wait()
        end
    end
})

extrashitTab:CreateButton({
    Name = "Infinite Yield",
    Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
    end
})

extrashitTab:CreateButton({
    Name = "Remote Spy",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/SimpleSpyV3/main.lua"))()
    end
})

extrashitTab:CreateButton({
    Name = "Dex Explorer",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/dex.lua"))()
    end
})

local BadgesTab = Window:CreateTab("Badges", 4483362458)

BadgesTab:CreateButton({
    Name = "Clock Badge Script",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/f0cell/sbsbsbs/refs/heads/main/clock%20badge%20script"))()
    end
})


BadgesTab:CreateButton({
    Name = "Get Elude",
    Callback = function()
        local teleportFunc = queueonteleport or queue_on_teleport
        if teleportFunc then
            teleportFunc([[ 
                if not game:IsLoaded() then 
                    game.Loaded:Wait() 
                end 
                repeat wait() until game.Players.LocalPlayer 
                game:GetService("RunService").RenderStepped:Connect(function() 
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-502.336, 14.228, -179.597) 
                end) 
                game:GetService("TeleportService"):Teleport(6403373529)
            ]])
        end
        game:GetService("TeleportService"):Teleport(11828384869)
    end
})

BadgesTab:CreateButton({
    Name = "Get Chain (1k slaps)",
    Callback = function()
        if game.Players.LocalPlayer.leaderstats.Slaps.Value >= 1000 then
            local teleportFunc = queueonteleport or queue_on_teleport
            if teleportFunc then
                teleportFunc([[
                    if not game:IsLoaded() then 
                        game.Loaded:Wait() 
                    end 
                    repeat wait() until game.Players.LocalPlayer
                    -- Solve puzzle sequence here
                    fireclickdetector(game.Workspace.Map.OriginOffice.Door.Keypad.Buttons.Enter.ClickDetector)
                    game:GetService("TeleportService"):Teleport(6403373529)
                ]])
            end
            game:GetService("TeleportService"):Teleport(9431156611)
        end
    end
})

local teleporting = false
local function teleport()
    while teleporting do
        if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.Arena.Plate.CFrame
        end
        wait(0.1)
    end
end

BadgesTab:CreateToggle({
    Name = "Get Tycoon (tip: use extended, slap aura, and ;walkfling",
    CurrentValue = false,
    Flag = "TeleportToPlate",
    Callback = function(state)
        teleporting = state
        if state then
            teleport()
        end
    end
})

BadgesTab:CreateButton({
    Name = "Get [REDACTED] (5k slaps)",
    Callback = function()
        if game.Players.LocalPlayer.leaderstats.Slaps.Value >= 5000 then
            for Door = 1, 10 do
                if not game:GetService("BadgeService"):UserHasBadgeAsync(game.Players.LocalPlayer.UserId, 2124847850) then
                    firetouchinterest(game.Players.LocalPlayer.Character:WaitForChild("Head"), workspace.PocketDimension.Doors[Door], 0)
                    firetouchinterest(game.Players.LocalPlayer.Character:WaitForChild("Head"), workspace.PocketDimension.Doors[Door], 1)
                    wait(3.75)
                end
            end
        else
            print("You need more slaps to access this.")
        end
    end
})

BadgesTab:CreateToggle({
    Name = "Auto Collect Jet Orbs",
    CurrentValue = false,
    Flag = "JetOrbsAutoCollect",
    Callback = function(Value)
        Jetfarm = Value
        while Jetfarm do
            for _, v in pairs(game.Workspace:GetChildren()) do
                if v.Name == "JetOrb" and v:FindFirstChild("TouchInterest") then
                    firetouchinterest(game.Players.LocalPlayer.Character:WaitForChild("Head"), v, 0)
                    firetouchinterest(game.Players.LocalPlayer.Character:WaitForChild("Head"), v, 1)
                end
            end
            task.wait()
        end
    end
})

BadgesTab:CreateButton({
    Name = "Teleport to Staff Application Room (Admin Glove)",
    Callback = function()
        if game:GetService("ReplicatedStorage").Assets.Retro.Map then
            game.ReplicatedStorage.Assets.Retro.Map.Parent = workspace
            wait(0.4)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-16971.7168, 797.600342, 4905.17334)
            wait(0.4)
            fireclickdetector(workspace.Map.RetroObbyMap:GetChildren()[5].StaffApp.Button.ClickDetector)
        else
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-16971.7168, 797.600342, 4905.17334)
            wait(0.4)
            fireclickdetector(workspace.Map.RetroObbyMap:GetChildren()[5].StaffApp.Button.ClickDetector)
        end
    end
})

BadgesTab:CreateButton({
    Name = "Get Lamp Glove",
    Callback = function()
        if game.Players.LocalPlayer.leaderstats.Glove.Value == "ZZZZZZZ" then
            for i = 1, 5 do
                game:GetService("ReplicatedStorage").nightmare:FireServer("LightBroken")
            end
        else
            game:GetService("StarterGui"):SetCore("SendNotification", {Title = "Error", Text = "Need ZZZZZZZ Glove.", Duration = 10})
        end
    end
})

BadgesTab:CreateButton({
    Name = "Get Ice Skate Glove",
    Callback = function()
        game:GetService("ReplicatedStorage").IceSkate:FireServer("Freeze")
    end
})

BadgesTab:CreateDropdown({
    Name = "Maze Badge",
    Options = {"Counter", "Elude"},
    CurrentOption = {"Counter"},
    MultipleOptions = false,
    Flag = "MazeBadgeDropdown",
    Callback = function(y)
        if y == "Counter" then
            local teleportFunc = queueonteleport or queue_on_teleport
            if teleportFunc then
                teleportFunc([[ 
                    if not game:IsLoaded() then 
                        game.Loaded:Wait() 
                    end 
                    repeat wait() until game.Players.LocalPlayer
                    -- Maze logic here
                ]])
            end
            game:GetService("TeleportService"):Teleport(11828384869)
        elseif y == "Elude" then
            local teleportFunc = queueonteleport or queue_on_teleport
            if teleportFunc then
                teleportFunc([[ 
                    if not game:IsLoaded() then 
                        game.Loaded:Wait() 
                    end 
                    repeat wait() until game.Players.LocalPlayer
                    -- Elude logic here
                ]])
            end
            game:GetService("TeleportService"):Teleport(11828384869)
        end
    end
})

BadgesTab:CreateToggle({
    Name = "Auto Collect Phase Orbs",
    CurrentValue = false,
    Flag = "PhaseOrbsAutoCollect",
    Callback = function(Value)
        Phasefarm = Value
        while Phasefarm do
            for _, v in pairs(game.Workspace:GetChildren()) do
                if v.Name == "PhaseOrb" and v:FindFirstChild("TouchInterest") then
                    firetouchinterest(game.Players.LocalPlayer.Character:WaitForChild("Head"), v, 0)
                    firetouchinterest(game.Players.LocalPlayer.Character:WaitForChild("Head"), v, 1)
                end
            end
            task.wait()
        end
    end
})

BadgesTab:CreateButton({
    Name = "Get Brazil Badge",
    Callback = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.workspace.Lobby.brazil.portal.CFrame
    end
})

BadgesTab:CreateButton({
    Name = "Get court evidence Badge",
    Callback = function()
        fireclickdetector(game.Workspace.Lobby.Scene.knofe.ClickDetector)
    end
})

BadgesTab:CreateButton({
    Name = "Get duck Badge",
    Callback = function()
        fireclickdetector(game.Workspace.Arena["default island"]["Rubber Ducky"].ClickDetector)
    end
})

BadgesTab:CreateButton({
    Name = "Get The Lone Orange Badge",
    Callback = function()
        fireclickdetector(game.Workspace.Arena.island5.Orange.ClickDetector)
    end
})

local uieditorTab = Window:CreateTab("leaderboard", 4483362458)

uieditorTab:CreateSection("ALL OF THIS IS FAKE! ONLY YOU SEE IT!")
uieditorTab:CreateSection("only edits the leaderboard, troll your friends!")

uieditorTab:CreateInput({
    Name = "Edit Slaps Number",
    PlaceholderText = "Type the amount of slaps you want",
    Flag = "SlapsInput",
    Callback = function(value)
        local slapsValue = tonumber(value)
        if slapsValue then
            local slaps = game.Players.LocalPlayer:FindFirstChild("leaderstats")
                          and game.Players.LocalPlayer.leaderstats:FindFirstChild("Slaps")
            if slaps then
                slaps.Value = slapsValue
            else
                warn("Can't find your slaps? Is your game loaded yet? Report this error to the discord!")
            end
        else
            warn("Enter a number, no letters, please!")
        end
    end
})

uieditorTab:CreateInput({
    Name = "Edit Glove Name",
    PlaceholderText = "Type the glove value you want",
    Flag = "GloveInput",
    Callback = function(value)
        local glove = game.Players.LocalPlayer:FindFirstChild("leaderstats")
                     and game.Players.LocalPlayer.leaderstats:FindFirstChild("Glove")
        if glove then
            glove.Value = value
        else
            warn("Glove value not found in leaderstats.")
        end
    end
})

local ChangesTab = Window:CreateTab("Change Logs", 4483362458)

ChangesTab:CreateSection("11/2/24: removed all halloween stuff :(")
ChangesTab:CreateSection("10/30/24: added a slapple serverhop farm (put in autoexecute!)")
ChangesTab:CreateSection("10/30/24: unpatched candycorn farm")
ChangesTab:CreateSection("10/30/24: added a janky little autofarm that doesn't really work")
ChangesTab:CreateSection("10/30/24: added a candycorn editor to halloween section")
ChangesTab:CreateSection("10/30/24: made a leaderboard editor and uieditor section")
ChangesTab:CreateSection("10/30/24: added fallback support to regular gloves")
ChangesTab:CreateSection("10/30/24: Made Changes tab.")
